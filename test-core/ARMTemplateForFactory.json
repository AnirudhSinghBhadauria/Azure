{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "test-core"
		},
		"azurestorage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'azurestorage'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Alert notification')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "test-fail",
						"type": "Fail",
						"dependsOn": [
							{
								"activity": "get-test-metadata",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"message": "get metadata failed",
							"errorCode": "101"
						}
					},
					{
						"name": "get-test-metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "FailTest",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "set test variable",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Execute copy chunk Pipeline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipeStatus",
							"value": "\"True\""
						}
					},
					{
						"name": "Wait for setting variable",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "get-test-metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 5
						}
					},
					{
						"name": "Execute copy chunk Pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Wait for setting variable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Copy Chunks",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Copy chunks failed",
						"type": "Fail",
						"dependsOn": [
							{
								"activity": "Execute copy chunk Pipeline",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "set test variable on fail",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"message": "Copy chunks failed",
							"errorCode": "102"
						}
					},
					{
						"name": "set test variable on fail",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "test-fail",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipeStatus",
							"value": "\"False\""
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"PipeStatus": {
						"type": "String",
						"defaultValue": "\"True\""
					}
				},
				"folder": {
					"name": "Alter notification"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/FailTest')]",
				"[concat(variables('factoryId'), '/pipelines/Copy Chunks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy Chunks')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Chunks",
						"description": "",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false,
									"prefix": "source/chunks/chunk_"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "SUCH_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SUCH_ID",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "SUCH_CODE",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SUCH_CODE",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "NLK",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "NLK",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Source_Chunk",
								"type": "DatasetReference",
								"parameters": {
									"chunk_name": "done"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Target_Chunks",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Copy Activity"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_Chunk')]",
				"[concat(variables('factoryId'), '/datasets/Target_Chunks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy Different Files')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Gell all files from source folder",
						"description": "",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Files",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Filter CSV files",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Gell all files from source folder",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Gell all files from source folder').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@contains(item().name, '.csv')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy each filtered csv file",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter CSV files",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter CSV files').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "Files_Dynamic_Dataset",
											"type": "DatasetReference",
											"parameters": {
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "CSVFiles_Dataset",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "Filter Parquet files",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Gell all files from source folder",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Gell all files from source folder').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@contains(item().name, '.parquet')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy each filtered parquet",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter Parquet files",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter Parquet files').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy Parquet",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "ParquetReadSettings"
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "Copy_ParquetFile",
											"type": "DatasetReference",
											"parameters": {
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Parquet_Target_Dataset",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "Filter JSON files",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Gell all files from source folder",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Gell all files from source folder').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@contains(item().name, '.json')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy each filtered JSON",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter JSON files",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter JSON files').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy json",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "Copy_JSONfile",
											"type": "DatasetReference",
											"parameters": {
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Target_JSON_dataset",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Copy Activity"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Files')]",
				"[concat(variables('factoryId'), '/datasets/Files_Dynamic_Dataset')]",
				"[concat(variables('factoryId'), '/datasets/CSVFiles_Dataset')]",
				"[concat(variables('factoryId'), '/datasets/Copy_ParquetFile')]",
				"[concat(variables('factoryId'), '/datasets/Parquet_Target_Dataset')]",
				"[concat(variables('factoryId'), '/datasets/Copy_JSONfile')]",
				"[concat(variables('factoryId'), '/datasets/Target_JSON_dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy Employee')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Employee",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Organization Group Code",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "OrganizationGroupCode",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Job Family Code",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "JobFamilyCode",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Job Code",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "JobCode",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Year Type",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "YearType",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Year",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Year",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Organization Group",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "OrganizationGroup",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Department Code",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DepartmentCode",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Department",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Department",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Union Code",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "UnionCode",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Union",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Union",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Job Family",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "JobFamily",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Job",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Job",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Employee Identifier",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "EmployeeIdentifier",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Salaries",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Salaries",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Overtime",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Overtime",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Other Salaries",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "OtherSalaries",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Total Salary",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "TotalSalary",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Retirement",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Retirement",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Health and Dental",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "HealthandDental",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Other Benefits",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "OtherBenefits",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Total Benefits",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "TotalBenefits",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Total Compensation",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "TotalCompensation",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "EmployeeCSV",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "EmployeeParquet",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Copy Activity"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/EmployeeCSV')]",
				"[concat(variables('factoryId'), '/datasets/EmployeeParquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy Files')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy list files",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"fileListPath": "test-storage/source/test/files.txt",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Files",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "FilesCopy",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Copy Activity"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Files')]",
				"[concat(variables('factoryId'), '/datasets/FilesCopy')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy Sheets')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "source/sales",
									"wildcardFileName": "sales*",
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Sales_Dataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Sheet_Copy_Dataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Copy Activity"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Sales_Dataset')]",
				"[concat(variables('factoryId'), '/datasets/Sheet_Copy_Dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Core')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Finance",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Finance",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Copy_Finance",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete Finance",
						"description": "Delete finances from source",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy Finance",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Finance",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Copy and Delete Activity"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Finance')]",
				"[concat(variables('factoryId'), '/datasets/Copy_Finance')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete Employee')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Delete Weather",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Weather",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Delete Activity"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Weather')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/main')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Folder Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Files",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "For each file in the soure folder",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Folder Metadata",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Folder Metadata').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get each file",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "Files_Dynamic_Dataset",
											"type": "DatasetReference",
											"parameters": {
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"lastModified",
											"itemName"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "If file recently mod",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get each file",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('Get each file').output.lastModified, variables('MostRecentTimestamp'))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Setting timestamp",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "MostRecentTimestamp",
													"value": {
														"value": "@activity('Get each file').output.lastModified",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Setting filename",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Setting timestamp",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "LastModifiedFileName",
													"value": {
														"value": "@activity('Get each file').output.itemName",
														"type": "Expression"
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Copying the most recent file",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "For each file in the soure folder",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Files_Dynamic_Dataset",
								"type": "DatasetReference",
								"parameters": {
									"FileName": {
										"value": "@variables('LastModifiedFileName')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Dynamic_Target",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete most recent file form source",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copying the most recent file",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Files_Dynamic_Dataset",
								"type": "DatasetReference",
								"parameters": {
									"FileName": {
										"value": "@variables('LastModifiedFileName')",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"MostRecentTimestamp": {
						"type": "String",
						"defaultValue": "2000-01-01 00:00:00"
					},
					"LastModifiedFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Most Recent Activity"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Files')]",
				"[concat(variables('factoryId'), '/datasets/Files_Dynamic_Dataset')]",
				"[concat(variables('factoryId'), '/datasets/Dynamic_Target')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CSVFiles_Dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurestorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Copy Files Datasets"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "target/processed files/csv",
						"container": "test-storage"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurestorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy_Finance')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurestorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Finance Datasets"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "target/processed finance",
						"container": "test-storage"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurestorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy_JSONfile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurestorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Copy Files Datasets"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": "source/test",
						"container": "test-storage"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurestorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy_ParquetFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurestorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Copy Files Datasets"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": "source/test",
						"container": "test-storage"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurestorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dynamic_Target')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurestorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Files Datasets"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "target/Recent files",
						"container": "test-storage"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurestorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EmployeeCSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurestorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Employee Datasets"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Employee_Compensation.csv",
						"folderPath": "source/employee",
						"container": "test-storage"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Organization Group Code",
						"type": "String"
					},
					{
						"name": "Job Family Code",
						"type": "String"
					},
					{
						"name": "Job Code",
						"type": "String"
					},
					{
						"name": "Year Type",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Organization Group",
						"type": "String"
					},
					{
						"name": "Department Code",
						"type": "String"
					},
					{
						"name": "Department",
						"type": "String"
					},
					{
						"name": "Union Code",
						"type": "String"
					},
					{
						"name": "Union",
						"type": "String"
					},
					{
						"name": "Job Family",
						"type": "String"
					},
					{
						"name": "Job",
						"type": "String"
					},
					{
						"name": "Employee Identifier",
						"type": "String"
					},
					{
						"name": "Salaries",
						"type": "String"
					},
					{
						"name": "Overtime",
						"type": "String"
					},
					{
						"name": "Other Salaries",
						"type": "String"
					},
					{
						"name": "Total Salary",
						"type": "String"
					},
					{
						"name": "Retirement",
						"type": "String"
					},
					{
						"name": "Health and Dental",
						"type": "String"
					},
					{
						"name": "Other Benefits",
						"type": "String"
					},
					{
						"name": "Total Benefits",
						"type": "String"
					},
					{
						"name": "Total Compensation",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurestorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EmployeeParquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurestorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Employee Datasets"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "target/processed employee",
						"container": "test-storage"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurestorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FailTest')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurestorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Fail Datasets"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "source/dribble",
						"container": "test-storage"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurestorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Files')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurestorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Files Datasets"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "source/test",
						"container": "test-storage"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurestorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FilesCopy')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurestorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Files Datasets"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "target/processed files",
						"container": "test-storage"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "State/UT",
						"type": "String"
					},
					{
						"name": "Prop_1",
						"type": "String"
					},
					{
						"name": "2023",
						"type": "String"
					},
					{
						"name": "2022",
						"type": "String"
					},
					{
						"name": "2021",
						"type": "String"
					},
					{
						"name": "2020",
						"type": "String"
					},
					{
						"name": "2019",
						"type": "String"
					},
					{
						"name": "2018",
						"type": "String"
					},
					{
						"name": "2017",
						"type": "String"
					},
					{
						"name": "2016",
						"type": "String"
					},
					{
						"name": "2015",
						"type": "String"
					},
					{
						"name": "2014",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurestorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Files_Dynamic_Dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurestorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Files Datasets"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": "source/test",
						"container": "test-storage"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurestorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Finance')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurestorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Finance Datasets"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "financial-year.csv",
						"folderPath": "source/finance",
						"container": "test-storage"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "year",
						"type": "String"
					},
					{
						"name": "industry_code_ANZSIC",
						"type": "String"
					},
					{
						"name": "industry_name_ANZSIC",
						"type": "String"
					},
					{
						"name": "rme_size_grp",
						"type": "String"
					},
					{
						"name": "variable",
						"type": "String"
					},
					{
						"name": "value",
						"type": "String"
					},
					{
						"name": "unit",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurestorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParquetFiles_Dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurestorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Copy Files Datasets"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "target",
						"container": "test-storage"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "OrganizationGroupCode",
						"type": "UTF8"
					},
					{
						"name": "JobFamilyCode",
						"type": "UTF8"
					},
					{
						"name": "JobCode",
						"type": "UTF8"
					},
					{
						"name": "YearType",
						"type": "UTF8"
					},
					{
						"name": "Year",
						"type": "UTF8"
					},
					{
						"name": "OrganizationGroup",
						"type": "UTF8"
					},
					{
						"name": "DepartmentCode",
						"type": "UTF8"
					},
					{
						"name": "Department",
						"type": "UTF8"
					},
					{
						"name": "UnionCode",
						"type": "UTF8"
					},
					{
						"name": "Union",
						"type": "UTF8"
					},
					{
						"name": "JobFamily",
						"type": "UTF8"
					},
					{
						"name": "Job",
						"type": "UTF8"
					},
					{
						"name": "EmployeeIdentifier",
						"type": "UTF8"
					},
					{
						"name": "Salaries",
						"type": "UTF8"
					},
					{
						"name": "Overtime",
						"type": "UTF8"
					},
					{
						"name": "OtherSalaries",
						"type": "UTF8"
					},
					{
						"name": "TotalSalary",
						"type": "UTF8"
					},
					{
						"name": "Retirement",
						"type": "UTF8"
					},
					{
						"name": "HealthandDental",
						"type": "UTF8"
					},
					{
						"name": "OtherBenefits",
						"type": "UTF8"
					},
					{
						"name": "TotalBenefits",
						"type": "UTF8"
					},
					{
						"name": "TotalCompensation",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurestorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parquet_Target_Dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurestorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Copy Files Datasets"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "target/processed files/parquet",
						"container": "test-storage"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurestorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sales_Dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurestorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Sales Datasets"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "source/sales",
						"container": "test-storage"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurestorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sheet_Copy_Dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurestorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Sales Datasets"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "target/processed sales",
						"container": "test-storage"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurestorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_Chunk')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurestorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"chunk_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Chunk Datasets"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "test-storage"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "SUCH_ID",
						"type": "String"
					},
					{
						"name": "SUCH_CODE",
						"type": "String"
					},
					{
						"name": "NLK",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurestorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Target_Chunks')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurestorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Chunk Datasets"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "target/processed chunks",
						"container": "test-storage"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "State/UT",
						"type": "String"
					},
					{
						"name": "Prop_1",
						"type": "String"
					},
					{
						"name": "2023",
						"type": "String"
					},
					{
						"name": "2022",
						"type": "String"
					},
					{
						"name": "2021",
						"type": "String"
					},
					{
						"name": "2020",
						"type": "String"
					},
					{
						"name": "2019",
						"type": "String"
					},
					{
						"name": "2018",
						"type": "String"
					},
					{
						"name": "2017",
						"type": "String"
					},
					{
						"name": "2016",
						"type": "String"
					},
					{
						"name": "2015",
						"type": "String"
					},
					{
						"name": "2014",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurestorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Target_JSON_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurestorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Copy Files Datasets"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "target/processed files/json",
						"container": "test-storage"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurestorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Weather')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurestorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Weather Dataset"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "weather_data.csv",
						"folderPath": "source/weather",
						"container": "test-storage"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "station_id",
						"type": "String"
					},
					{
						"name": "timestamp",
						"type": "String"
					},
					{
						"name": "temperature",
						"type": "String"
					},
					{
						"name": "snow_depth",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurestorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/azurestorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('azurestorage_connectionString')]"
				}
			},
			"dependsOn": []
		}
	]
}